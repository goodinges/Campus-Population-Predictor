#!/usr/bin/env python3.2
#The second scan: In this scan I go through the generated logs of script 3 and try to merge Passing records which are between two STAY records with the same estimatedLocation. It also merge any squential similar records too.

import time
from collections import Counter
from datetime import datetime
import sys

recordsFile = open("../outs/3","r")
outFile = open(r"../outs/4","w")

currentRecords = []


lastRecord = recordsFile.readline()
lastRecord_splits = lastRecord.split('\t')

while lastRecord != '':
	if lastRecord_splits[0] == 'PASS':
		outFile.write(lastRecord)
		lastRecord = recordsFile.readline()
		lastRecord_splits = lastRecord.split('\t')
	elif lastRecord_splits[0] == 'STAY':
		break
if lastRecord == '':
	sys.exit()

currentLocation = lastRecord_splits[8]

currentRecords.append(lastRecord)

nextRecord = recordsFile.readline()
nextRecord_splits = nextRecord.split('\t')

while nextRecord != '':

	print(nextRecord)
	print(nextRecord_splits)
#	print(currentLocation)
	if nextRecord_splits[8] == currentLocation:
		mergedRecord = 'STEM\t' + nextRecord_splits[1]

		estimatedStartTime = time.strptime(currentRecords[0].split('\t')[2],"%m/%d/%Y %H:%M:%S")
		estimatedEndTime = time.strptime(nextRecord_splits[3],"%m/%d/%Y %H:%M:%S")

		estimatedDuration_seconds = time.mktime(estimatedEndTime) - time.mktime(estimatedStartTime)
		estimatedDuration = datetime.fromtimestamp(time.mktime(estimatedEndTime)) - datetime.fromtimestamp(time.mktime(estimatedStartTime))

		certainStartTime = time.strptime(currentRecords[0].split('\t')[5],"%m/%d/%Y %H:%M:%S")
		certainEndTime = time.strptime(nextRecord_splits[6],"%m/%d/%Y %H:%M:%S")

		certainDuration = datetime.fromtimestamp(time.mktime(certainEndTime)) - datetime.fromtimestamp(time.mktime(certainStartTime))

		numberOfLogs = 0
		currentLocationRep = 0
		for record in currentRecords:
			numberOfLogs += float(record.split('\t')[9])
			currentLocationRep += int(record.split('\t')[10].split('(')[1].split(')')[0])

		#locationCounters = Counter([record.split('\t')[8] for record in currentRecords).most_common()
		estimatedLocation_certaincy = currentLocationRep / numberOfLogs*100

		mergedRecord += '\t' + time.strftime("%m/%d/%Y %H:%M:%S", estimatedStartTime) +\
		'\t' + time.strftime("%m/%d/%Y %H:%M:%S", estimatedEndTime) +\
		'\t' + str(estimatedDuration) +\
		'\t' + time.strftime("%m/%d/%Y %H:%M:%S", certainStartTime) +\
		'\t' + time.strftime("%m/%d/%Y %H:%M:%S", certainEndTime) +\
		'\t' + str(certainDuration) +\
		'\t' + currentLocation +\
		'\t' + str(numberOfLogs) +\
		'\t%%%.2f' % estimatedLocation_certaincy +\
		'(%d)'  % int(currentLocationRep) +\
		'\n'

		del currentRecords[:]
		lastRecord = mergedRecord

	else:
		#print(nextRecord_splits[0])
		if  nextRecord_splits[0] == 'STAY':
			for record in currentRecords:
				outFile.write(record)
			del currentRecords[:]
			currentLocation = nextRecord_splits[8]
		#	print("*"+currentLocation)
		lastRecord = nextRecord

	currentRecords.append(lastRecord)
	nextRecord = recordsFile.readline()
	nextRecord_splits = nextRecord.split('\t')

for record in currentRecords:
	outFile.write(record)
del currentRecords[:]

recordsFile.close()
outFile.close()
